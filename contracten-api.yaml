openapi: 3.0.1
info:
  title: MijnGegevens API, contracten
  description: Deze documentatie beschrijft de generieke api voor het MijnApp-project van de gemeente Eindhoven. Als uitgangspunt is de API-strategie van het DSO gebruikt.
    [API en URI strategie DSO](https://aandeslagmetdeomgevingswet.nl/digitaal-stelsel/documenten/documenten/api-uri-strategie/) genomen.
    Gegevensdefinities zijn zoveel mogelijk overgenomen uit de relevante informatiemodellen, waaronder de BAG en de GBA.
  version: 0.7.0

servers:
  - url: https://mijnapp.solviteers.nl/api/{basePath}
    description: Acceptatie omgeving
    variables:
      basePath:
        default: v1

paths:
  /personen/{bsn}/contracten:
    get:
      summary: Lijst met contracten
      tags:
        - contracten
      parameters:
        - $ref: parameters/path-bsn.yaml#/bsnPathParam
      responses:
        '200':    # status code
          description: Een JSON array met contracten
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contract'
        '401':
          $ref: responses/unauthorized.yaml#/Unauthorized
        '403':
          $ref: responses/forbidden.yaml#/Forbidden
        '404':
          $ref: responses/not-found.yaml#/NotFound
        '503':
          $ref: responses/unavailable.yaml#/Unavailable

  /personen/{bsn}/contracten/{id}:
    get:
      summary: Contractdetails
      tags:
        - contracten
      parameters:
        - $ref: parameters/path-bsn.yaml#/bsnPathParam
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Contractidentificatie
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractDetails'
              encoding:
                contractLeverancierLogo:
                  contentType: image/svg+xml
        '401':
          $ref: responses/unauthorized.yaml#/Unauthorized
        '403':
          $ref: responses/forbidden.yaml#/Forbidden
        '404':
          $ref: responses/not-found.yaml#/NotFound
        '503':
          $ref: responses/unavailable.yaml#/Unavailable

components:
  # Reusable schemas (data models)
  schemas:
    # Contract
    Contract:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unieke sleutel contract
        identificatie:
          type: string
          description: Domeinspecifiek contractnummer, bijvoorbeeld polisnummer of zaakidentificatie
        titel:
          type: string
        omschrijving:
          type: string
        organisatie:
          $ref: schemas/organisatie.yaml#/OrganisatieKort
      required:
        - id
        - contractNummer

    # Contractdetails
    ContractDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unieke sleutel contract
        identificatie:
          type: string
          description: Domeinspecifiek contractnummer, bijvoorbeeld polisnummer of zaakidentificatie
        titel:
          type: string
        omschrijving:
          type: string
        beginDatum:
          type: string
          format: date
          nullable: true
          description: Ingangsdatum contract
        eindDatum:
          type: string
          format: date
          nullable: true
          description: Einddatum contract
        type:
          type: string
          description: Soort contract. polis, identiteitsdocument, voorziening
        kosten:
          $ref: schemas/kosten.yaml#/Kosten
        organisatie:
          $ref: schemas/organisatie.yaml#/Organisatie
        extraVelden:
          type: array
          description: Vrij aan te bieden key-value pairs.
          items:
            type: string
          minItems: 1
          maxItems: 5
      required:
        - id
        - identificatie
        - titel
        - beginDatum

  # Security scheme definitions (see Authentication), HTTP bearer
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

# Apply the security globally to all operations
security:
  - bearerAuth: []         # use the same name as the defined securityScheme
